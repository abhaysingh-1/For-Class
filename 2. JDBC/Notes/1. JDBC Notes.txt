Java DataBase Connectivity (JDBC)
=================================================
> Java Data Base Connectivity is an API, as the 
  name implies, it helps to achieve the 
  connectivity between Java Programs & Database
  
> Note: Servlet's & JSPs are also Java Programs

> If we have a Web Application & if it has a DB, 
  then it needs to interact with DB to read / 
  modify the data

> JDBC helps to do this & in the world of Java, 
  JDBC is the "One & Only API" that helps to 
  interact ONLY with RDBMS (DB) Application
  
> Also JDBC is "RDBMS application Independent" 
  i.e. using JDBC we can interact with any 
  RDBMS Applications like Oracle, MySQL, DB2, 
  MS-SQL, SyBase, etc.,
  
NOTE: 
------
1. MongoDB 
2. Cassandra 
3. Hadoop Distributed File System (HDFS/Hadoop)
They are Applications to store the data but they
are not RDBMS Applications
  
  
  

  
  
 
JDBC Pre-requirements:
=========================
1.	Install an RDBMS Application (MySQL 5.5)
2.	Create a "Database (Schema)" by name 
    "J2EE10AM_DB"
3.	Create a table by name "STUDENT_INFO"
    in the above "Database"
4.	Insert some data into the above table

SQL Queries for MySQL RDBMS Application:-
==========================================
create database J2EE10AM_DB;

create table student_info
( regno int not null,
  firstname varchar(50),
  middlename varchar(50),
  lastname varchar(50),
  email varchar(50),
  mobile bigint,
  birth_day int,
  birth_month varchar(3),
  birth_year int,
  primary key(regno)
);

insert into students_info values 
( 1, 'Praveen', 'NA', 'D', 
  'abc@gmail.com', 9886767360, 
  20, 'FEB', 1991);
 
 
 
insert into student_info values (1, 'Praveen', 'NA', 'D', 'abc@gmail.com', 9445326450, 20, 'APR', 1995);
insert into student_info values (2, 'Naveen', 'NA', 'A', 'xyz@gmail.com',  9880235641, 01, 'MAR', 1995);
insert into student_info values (3, 'Raveen', 'NA', 'B', 'def@gmail.com', 9536412985, 05, 'OCT', 1981);
insert into student_info values (4, 'Keveen', 'NA', 'C', 'ghi@gmail.com', 8521469703, 09, 'OCT', 1998);
insert into student_info values (5, 'Chaveen', 'NA', 'E', 'efg@gmail.com', 9675325938, 09, 'JUL', 1994);


Some Useful SQL Queries
===============================
1. To Connect to DataBase
---------------------------
	use database data_base_name;

2. To get the List of databases:-
---------------------------------
	show databases;
	
3. To get the list of tables:-
------------------------------
	show tables;
   
4. To know the table structure:-
------------------------------
	describe table_name;
    Example: describe students_info;
   
   
   
   
   
   
   
   
************************   
*    Assignment        *
************************ 
> create a table to store "Course Details" in 
  "J2EE10AM_DB" database with the following structure

Table Name 	: course_info
Columns		:
--------------
1. course_id	int(PK)
2. course_name	varchar(25)
3. fee			varchar(10)
4. duration		varchar(25)
5. faculty		varchar(50)

> Insert following course data (along with other info).
  Note:- Data for "duration" should be in Months & Days
  ===============================
  | course_id	|	course_name	|
  ===============================
		1			Core Java
		2			Java EE
		3			SQL
		4			HTML
		5			Hibernate
		6			Springs
		7			AngularJS
		8			Web Services
		9			General Aptitude
		10			Android 


Queries :-
=========
create table course_info
( course_id int not null,
  course_name varchar(50),
  fee float,
  duration varchar(25),
  faculty varchar(50),
  primary key(course_id)
);

insert into course_info values (1, 'Core Java', 8000.00, '4 Months', 'Madhu');
insert into course_info values (2, 'Java EE', 5000.00, '2 Months', 'Praveen');
insert into course_info values (3, 'SQL', 2000.20, '1 Months', 'Deekshit');
insert into course_info values (4, 'HTML', 1000.50, '1 Months', 'Priyanka');
insert into course_info values (5, 'Hibernate', 2500.25, '1 Months', 'Harsha');
insert into course_info values (6, 'Springs', 2500.00, '1 Months', 'Harsha');
insert into course_info values (7, 'AngularJS', 3500.50, '1 Months', 'Shashi');
insert into course_info values (8, 'Web Services', 8000.00, '2 Months', 'Praveen');
insert into course_info values (9, 'General Aptitude', 5000.50, '1 Months', 'Namratha');
insert into course_info values (10, 'Android', 7000.45, '2 Months', 'Swetha');

> create a table to store "Guardian Details" in 
  "J2EE10AM_DB" database with the following structure

Table Name 	: guardian_info
Columns		:
--------------
1. regno 		int(PK)
2. gfirstname	varchar(50)
3. gmiddlename	varchar(50)
4. glastname	varchar(50)
4. mobile		bigint

> Insert regno 1 to 5 data into "guardian_info"


Queries :-
=========

create table guardian_info
( regno int not null,
  gfirstname varchar(50),
  gmiddlename varchar(50),
  glastname varchar(50),
  mobile bigint,
  primary key(regno)
);
  
insert into guardian_info values (1, 'Dyamappa', 'NA', 'B S', 9956321784);
insert into guardian_info values (2, 'Anjana', 'NA', 'D', 9886420364);
insert into guardian_info values (3, 'Ravindra', 'NA', 'X', 7765314651);
insert into guardian_info values (4, 'Arayana', 'NA', 'B C', 8652349134);
insert into guardian_info values (5, 'Rejani', 'NA', 'Changappa', 9446349753);







 
 
 
> Create a Table to store Students Address information 
  in "J2EE10AM_DB" with the following structure

Table Name 	: student_addressinfo
Columns		:
--------------
1. regno 		int
2. addr_type 	varchar(10)
3. addr1		varchar(100)
4. addr2 		varchar(100)
5. landmark		varchar(100)
6. city			varchar(50)
7. pincode		int

Note:-
=======
- "addr_type" should have value 
  "present" for "Present Address" and 
  "permanent" for "Permanent Address" 

- Since every regno can have "Present as well as Permanent 
  Address" combination of "regno & addr_type" should be made
  as primary key i.e. "Composite Key" 
 
> Insert regno 1 to 5 data into "student_addressinfo" 
 


Queries :-
=========
create table student_addressinfo
( regno int not null,
  addr_type varchar(10),
  addr1		varchar(100),
  addr2 	varchar(100),
  landmark	varchar(100),
  city		varchar(50),
  pincode	int,
  primary key(regno, addr_type)
);

insert into student_addressinfo values (1, 'present', '#1, 2nd Cross, 3rd Main', 'ABC Nagar, 2nd Stage', 'Near Canara Bank', 'Bangalore', 560008);
insert into student_addressinfo values (1, 'permanent', '#9, 8th Cross, 7th Main', 'XYZ Nagar, 4th Stage', 'Near Gurukul', 'Mangalore', 574142); 
insert into student_addressinfo values (2, 'present', '#4A, 5 & 6 2nd Phase', 'Peenya Industrial Estate', 'Near Manufacturing Facilities', 'Bangalore', 560078);
insert into student_addressinfo values (2, 'permanent', ' 2257/1 Vinoba Road', 'Near Kala Mandir', '', 'Chitradurga', 577527); 
insert into student_addressinfo values (3, 'present', '# 217, 10 A Main', '2nd Floor, HRBR Layout, 1st Block', 'Near Horamavu Signal', 'Bangalore', 560004);
insert into student_addressinfo values (3, 'permanent', '88 Door No,8th Main,9th Cross', 'K H Road,Saraswathipuram', 'Near Alma Master', 'Delhi', 110011); 
insert into student_addressinfo values (4, 'present', '#37, 1st Floor Basco Court', 'Basavanagudi', 'NA', 'Bangalore', 560010);
insert into student_addressinfo values (4, 'permanent', '115/ 48, East End C Main Road', 'Sri Kanva Pride, 2nd Floor', 'Jayanagar 9th Block', 'Hyderabad', 500012); 
insert into student_addressinfo values (5, 'present', 'Sri Ram Mens PG, 2Nd Floor, Samrat Complex', 'Udayaravi Road,Kuvempunagar', 'Near Vijaya Bank', 'Bangalore', 560017);
insert into student_addressinfo values (5, 'permanent', 'No.28, 4th B Cross , V Block, ', 'Koramangala Industrial Layout', 'Above Taj Paradise Hotel', 'Pune', 411041); 



> Create a Table to store Students Course & Mock rating info
  in "J2EE10AM_DB" with the following structure

Table Name 	: student_courseinfo
Columns		:
--------------
1. regno 		int
2. course_id 	int
3. mock_rating	varchar(2)



Note:-
=======
- Since every regno can have multiple mock rating per 
  course. Hence combination of "regno & course_id" should be 
  made as primary key i.e. "Composite Key"

- Insert regno 1 to 5 data into "student_courseinfo" 


  
Queries :-
=========
create table student_courseinfo
( regno int not null,
  course_id int not null,
  mock_rating	varchar(2),
  primary key(regno, course_id)
);

insert into student_courseinfo values (1, 1, '1*');
insert into student_courseinfo values (1, 2, '1*');
insert into student_courseinfo values (1, 3, '1*');
insert into student_courseinfo values (1, 4, '1*');
insert into student_courseinfo values (1, 5, '1*');
insert into student_courseinfo values (1, 6, '1*');
insert into student_courseinfo values (1, 7, '1*');
insert into student_courseinfo values (1, 8, '1*');
insert into student_courseinfo values (1, 9, '1*');
insert into student_courseinfo values (1, 10,'1*');

insert into student_courseinfo values (2, 1, '1*');
insert into student_courseinfo values (2, 2, '2*');
insert into student_courseinfo values (2, 3, '2');
insert into student_courseinfo values (2, 4, '1');
insert into student_courseinfo values (2, 5, null);
insert into student_courseinfo values (2, 6, null);

insert into student_courseinfo values (3, 1, '1*');
insert into student_courseinfo values (3, 2, null);

insert into student_courseinfo values (4, 1, null);
insert into student_courseinfo values (4, 2, null);
insert into student_courseinfo values (4, 3, null);
insert into student_courseinfo values (4, 4, null);
insert into student_courseinfo values (4, 5, null);
insert into student_courseinfo values (4, 6, null);
insert into student_courseinfo values (4, 8, null);

insert into student_courseinfo values (5, 7, '1*');
insert into student_courseinfo values (5, 10, '1*');
    



	
> Create a Table to store Students Education info
  in "J2EE10AM_DB" with the following structure

Table Name 	: education_type
Columns		:
--------------
1. type int
2. name varchar(50)

Table Name 	: student_educationinfo
Columns		:
--------------
1. regno int
2. type int
3. college varchar(250)
4. university varchar(250)
5. branch varchar(50)
6. yop int
7. percentage float

> Insert following educational details.
  ===============================================
  | type		|	name						|
  ===============================================
		1		S.S.L.C (10th Standard)
		2		2nd P.U.C (12th Standard or +2)
		3		Diploma (Under Graduation)
		4		Degree (Graduation)
		5		Master Degree (Post Graduation)

Note:-
=======
- Since every regno can have multiple education info. 
  Hence combination of "regno & type" should be 
  made as primary key i.e. "Composite Key"

- Insert regno 1 to 5 data into "student_educationinfo" 

Queries :-
=========
create table education_type
( type int not null,
  name varchar(50),
  primary key(type)
);

create table student_educationinfo
( 
  regno int not null,
  type int not null,
  college varchar(250),
  university varchar(250),
  branch varchar(50),
  yop int,
  percentage float,
  primary key(regno,type)
);

insert into education_type values (1, 'S.S.L.C (10th Standard)');
insert into education_type values (2, '2nd P.U.C (12th Standard or +2)');
insert into education_type values (3, 'Diploma (Under Graduation)');
insert into education_type values (4, 'Degree (Graduation)');
insert into education_type values (5, 'Master Degree (Post Graduation)');

insert into student_educationinfo values (1, 1, 'Marimallappa High School, Mysore', 'Karnataka Secondary Education Examination Board', null, 1996, 78.5);
insert into student_educationinfo values (1, 2, 'Marimallappa P.U. College, Mysore', 'Department of Pre-University Education, Karnataka', 'PCMB', 1998, 65);
insert into student_educationinfo values (1, 4, 'A.P.S College of Engineering, Bangalore', 'Visvesvaraya Technological University, Karnataka', 'E&C', 2002, 65.5);

insert into student_educationinfo values (2, 1, 'Bapuji High School, Chitradurga', 'Karnataka Secondary Education Examination Board', null, 2000, 68.59);
insert into student_educationinfo values (2, 3, 'SJM Institute Of Technology, Chitradurga', 'Visvesvaraya Technological University, Karnataka', 'CS', 2003, 75.96);
insert into student_educationinfo values (2, 4, 'SJM Institute Of Technology, Chitradurga', 'Visvesvaraya Technological University, Karnataka', 'IS', 2002, 86.4);

insert into student_educationinfo values (3, 1, 'S R S High School, Delhi', 'Board of Higher Secondary Education Delhi', null, 2005, 59.75);
insert into student_educationinfo values (3, 2, 'Anjan College, Delhi', 'Delhi Board of Senior Secondary Education', 'null', 2007, 61.2);
insert into student_educationinfo values (3, 3, 'Shiva Institute Of Technology, Delhi', 'Delhi Technological University, Delhi', 'Mech.', 2010, 65.23);
insert into student_educationinfo values (3, 4, 'Shiva Institute Of Technology, Delhi', 'Delhi Technological University, Delhi', 'Mech.', 2014, 78.2);
insert into student_educationinfo values (3, 5, 'Shiva Institute Of Technology, Delhi', 'Delhi Technological University, Delhi', 'Mech.', 2017, 80);

insert into student_educationinfo values (4, 1, 'SLV High School, Hyderabad','Board of Intermediate and Secondary Education, Hyderabad', null, 2012, 59.5);
insert into student_educationinfo values (4, 2, 'Saraswati College, Hyderabad', 'Board of Intermediate and Secondary Education, Hyderabad', null, 2014, 58);
insert into student_educationinfo values (4, 4, 'A.P.S College of Engineering, Bangalore', 'Visvesvaraya Technological University, Karnataka', 'E&C', 2016, 55.5);

insert into student_educationinfo values (5, 1, 'Government High School, Pune', 'Maharashtra State Board of Secondary and Higher Secondary Education', null, 2009, 59.75);
insert into student_educationinfo values (5, 2, 'Government College, Pune', 'Maharashtra State Board of Secondary and Higher Secondary Education', 'null', 2011, 61);
insert into student_educationinfo values (5, 3, 'Government Institute Of Technology, Delhi', 'Maharashtra State Board of Technical Education', 'E&E', 2014, 65);
insert into student_educationinfo values (5, 4, 'Government Institute Of Technology, Delhi', 'Maharashtra State Board of Technical Education', 'E&E', 2017, 78);



> Create a Table to store Requirement info
  in "J2EE10AM_DB" with the following structure

Table Name 	: requirement_info
Columns		:
--------------
1. req_id int
2. company_name varchar(50)
3. designation varchar(50)
4. skills varchar(50)
5. interview_location varchar(50)
6. job_location varchar(50)
7. salary varchar(250)
8. 10_percentage int
9. 12_percentage int
10. degree_percentage int
11. masterdegree_percentage int
12. other_info varchar(250)

> Insert 10 requirements to this table 


create table requirement_info
(req_id int,
company_name varchar(50),
designation varchar(50),
skills varchar(50),
interview_location varchar(50),
job_location varchar(50),
salary varchar(250),
10_percentage int,
12_percentage int,
degree_percentage int,
masterdegree_percentage int,
other_info varchar(250),
primary key (req_id)
);

insert into requirement_info values (1, 'Capgemini', 'Software Engineer', 'Java/J2EE', 'Bangalore', 'Any Where in India', 'As per comapany standrads', '60', '60', '60', '60', null);
insert into requirement_info values (2, 'Cognizant', 'Junior Consultant', 'Java/J2EE/SQL/HTML', 'Bangalore', 'Bangalore', '2.5 LPA', '60', '60', '60', '60', 'First 3 months training will be in Chennai');
insert into requirement_info values (3, 'Icicle Technologies', 'Developer', 'Java/J2EE/SQL/HTML/Hibernate/Springs', 'Bangalore', 'Mumbai', 'First 3 months 10K/month later 3 LPA', null, null, '60', '60', 'Candidate should be ready to work in Mumbai & Client location in Mumbai');
insert into requirement_info values (4, 'Ascendum Solutions', 'Software Developer', 'Hibernate/Springs', 'Bangalore', 'Bangalore', 'First 3 months no salary later 1.8 LPA', null, null, null, null, 'Candidate should be ready to work in Client locations');
insert into requirement_info values (5, 'Tech Mahindra', 'Software Consultant', 'Java', 'Bangalore', 'Any Where in India', '2.8 LPA', 55, 65, 60, 60, null);
insert into requirement_info values (6, 'Infosys', 'Software Engineer', 'Any Programming Language', 'Bangalore', 'Any Where in India', '3.5 LPA', 75, 75, 75, 75, 'Candidate should be ready to work on any Technology');
insert into requirement_info values (7, 'Wipro', 'Software Engineer', 'Any Programming Language preferably Java', 'Bangalore', 'Any Where in India', '3.0 LPA', 0, 0, 65, 65, 'Candidate should be ready to work on any Technology and any where in India');
insert into requirement_info values (8, 'TestYentra', 'Software Engineer', 'Java/Java EE', 'Bangalore', 'Any Where in India', '3.0 LPA', 0, 0, 65, 65, 'Candidate should be ready to work on any Technology including Selenium');
insert into requirement_info values (9, 'Prasanna Technologies', 'Software Engineer', 'Java/Java EE/Frameworks (Spring Mandatory)', 'Mangalore', 'Mangalore', 'As per comapany standrads', 0, 0, 65, 65, 'Candidate should be ready to work in Magalore');
insert into requirement_info values (10, 'All State', 'Software Developer', 'Java EE', 'Bangalore', 'Bangalore', '6 LPA', 60, 60, 65, 65, null);



> Create a Table to store Student Interview info
  in "J2EE10AM_DB" with the following structure

Table Name 	: student_interviewinfo
Columns		:
--------------
1. regno int
2. req_id int
2. isCleared varchar(1)
3. feedback varchar(250)

> Insert regno 1 to 5 data to this table 

Queries
========
create table student_interviewinfo
(regno int,
req_id int,
isCleared varchar(1),
feedback varchar(250),
primary key (regno,req_id) );

insert into student_interviewinfo values (1, 1, 'N', 'Candidate failed in Aptitude round');
insert into student_interviewinfo values (1, 5, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (1, 6, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (1, 10, 'Y', null);

insert into student_interviewinfo values (2, 1, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (2, 2, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (2, 5, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (2, 9, 'Y', null);

insert into student_interviewinfo values (3, 1, 'N', 'Candidate failed in Aptitude round');
insert into student_interviewinfo values (3, 2, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (3, 3, 'N', 'Candidate failed in HR round');
insert into student_interviewinfo values (3, 4, 'N', 'Candidate failed in HR round');
insert into student_interviewinfo values (3, 5, 'N', 'Candidate failed in Logical Reasoning round');
insert into student_interviewinfo values (3, 6, 'N', 'Candidate failed in Group Discussion round');
insert into student_interviewinfo values (3, 7, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (3, 8, 'N', 'Candidate failed in HR round');

insert into student_interviewinfo values (4, 1, 'N', 'Candidate failed in HR round');
insert into student_interviewinfo values (4, 2, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (4, 3, 'N', 'Candidate failed in HR round');
insert into student_interviewinfo values (4, 4, 'N', 'Candidate failed in Aptitude round');
insert into student_interviewinfo values (4, 5, 'N', 'Candidate failed in Logical Reasoning round');
insert into student_interviewinfo values (4, 6, 'N', 'Candidate failed in Group Discussion round');
insert into student_interviewinfo values (4, 7, 'N', 'Candidate failed in Technical round');
insert into student_interviewinfo values (4, 8, 'Y', null);

insert into student_interviewinfo values (5, 6, 'Y', null);











> Create a table to store "students other informations"
  such as password, last login time, etc.,  with the 
  following structure

Table Name 	: student_otherinfo
Columns		:
--------------
1. regno 		   	int(PK)
2. isadmin		   	varchar(1)
3. password		   	varchar(50)
4. login_attempts  	int
5. last_login_time 	varchar(50)

> Insert regno 1 to 5 data "student_otherinfo" table

> While inserting data into "students_otherinfo" 
  table make regno 1 "isadmin" value as "Y" 
  and rest as "N"
  
  
  
  
  
Queries :-
=========
  
create table student_otherinfo
( regno int not null,
  isadmin varchar(1),
  password varchar(50),
  login_attempts int,
  last_login_time varchar(50),
  primary key(regno)
);

insert into student_otherinfo values (1, 'Y', 'qwerty', 0, null);
insert into student_otherinfo values (2, 'N', 'qwerty', 0, null);
insert into student_otherinfo values (3, 'N', 'qwerty', 0, null);
insert into student_otherinfo values (4, 'N', 'qwerty', 0, null);
insert into student_otherinfo values (5, 'N', 'qwerty', 0, null);




	

  

  
   
Necessary Steps to Work with JDBC
==================================
//1. Load the "Driver"
//2. Get the "DB Connection" via "Driver"
//3. Issue "SQL Queries" via "Connection"
//4. "Process the Results" returned by "SQL Queries"
//5. Close All "JDBC Objects"















My First JDBC Program :-
=======================


Note:-
------
> "java.sql.*" is the Package Representation of JDBC
> i.e. Any Class / Interface belongs to this package
  means, it’s part of JDBC

  
  
  
  
  
  
  
  
  
  
  
IP Address 		:	192.168.0.6
Computer Name	:	QSP-SHMUTT-PC
Port Number		:	3306
User Name		:	root / j2ee
Password		:	root / j2ee
DB Name			:	J2EE10AM_DB

jdbc:mysql://192.168.0.6:3306/J2EE10AM_DB?user=j2ee&password=j2ee












		
Drivers:
===========		
Image:
------

> Drivers are external software component required
  by JDBC to interact with RDBMS Application

> Drivers are provided by "DB Vendor" & they are 
  "DB Dependent"
   
> i.e. Using My-SQL Driver we can ONLY interact 
  with My-SQL RDBMS Application & Using DB2 Driver 
  we can ONLY interact with DB2 RDBMS Application

> "Drivers", as the name implies, acts like a 
  "Bridge" between Java Application and 
  RDBMS Application 
 

 
 
 
 
 
> DB Vendor providers Driver Software in the form 
  of a "JAR File" 

JAR (Java ARchieve) File:
==========================
> It's a 
  Collection of Packages 
  + corresponding ".class" files
  + Other Necessary Resources 
    (Text File, XML, Property Files, etc.,)

> JAR file helps us to transfer the "Java files /
  .class files / Java Application" from one location
  to an another location

> Hence JAR File represents a "Java Application"  
 
> JAR File will have ".jar" file extension & 
  functionality wise it's similar to "ZIP" file

Steps to Create JAR File :-
----------------------------
1. Right Click on the Java Project, which we want
   to transfer, select "Export..."

2. Select "JAR File" option present under "Java" 
   & click on "Next"

3. Provide the "Destination & File Name", click
   on "Finish"

Steps to Make Use of JAR File :-
----------------------------------
1. Right Click on the Java Project, where we want
   to make use of JAR File, select "Build Path" 
   & click on "Add External Archives..."

2. Select the "JAR File" & Click on "Open"

3. We see JAR File under "Referenced Libraries"
   
   
   
   
   
   
   
   
   
   
   
Driver Class
=============   
> “Driver Class” is a Concrete Class, present in 
  driver JAR file, is the one that implements the
  "java.sql.Driver" interface

> This interface is present in JDBC API & every 
  JDBC driver provider has to implement this 
  Interface

> By referring Driver Manual we can get the "Driver
  Class" information

  
  
  
  
  
Steps to Load the "Driver Class" into the Program
--------------------------------------------------
There are 2 ways to load the Driver Class

1.  By invoking "registerDriver()" method present
    in "java.sql.DriverManager" Class by passing an 
	instance of "Driver Class"
	
Syntax :
========
public void DriverManager
          .registerDriver(java.sql.Driver driverRef) 
throws SQLException

Code for MySQL Driver :
=======================
java.sql.Driver ref = new com.mysql.jdbc.Driver();
DriverManager.registerDriver(ref);
   
   
   
   
   
   
2. Second approach to Load the Driver Class is with 
   the help of Java's "Class.forName()" Method

Example for MySQL Driver :
---------------------------
Class.forName("com.mysql.jdbc.Driver").newInstance();

> This is the most common approach to register a 
  Driver Class which helps us to pass "Driver Class
  Name at Runtime" 
  
> But if we create an instance of driver class using 
  new operator, then driver class name can't be 
  passed at Runtime


  
  
  
  
  

Driver Types
===============
There are 4 types of Drivers

Type 1 : JDBC-ODBC Bridge
Type 2 : Native-API Driver
Type 3 : Network-Protocol Driver
Type 4 : Native-Protocol Driver

ODBC = Open DataBase Connectivity





JDBC Step 1 Summary:-
======================
1. About Driver
	- Who provides the Driver
	- JAR File
	- How to Create & Make use of JAR file
2. Driver Class
3. Steps to load the Driver Class
4. Driver Types







URL Examples:-
=====================

ftp://ftp.is.co.za/rfc/rfc1808.txt

http://www.ietf.org/rfc/rfc2396.txt

ldap://[2001:db8::7]/c=GB?objectClass?one

telnet://192.0.2.16:80/








Uniform Resource Locator (URL)
================================
> As the name implies, it uniquely identifies
  a "Resource" or an "Application" in a Network
  
> There are "many" types of URL's & couple of 
  them are
  1. DB URL
  2. Web URL

DataBase Uniform Resource Locator (DB URL)
==========================================
> DB URL, as the name implies, it uniquely 
  identifies Database OR a RDBMS Application 
  in the Network

> The structure of DB URL is
  <Protocol>:<Sub-protocol>:<Sub-name>

1. Protocol     
============
> It's a Mandatory Information
> In case of Java/Java EE, Protocol is always "jdbc"












2. Sub-protocol
==============
> It's a Mandatory Information

> It identifies the "DB Connectivity Mechanism"
  used to Connect to DB
  
> This information is provided by DB Vendor & we 
  have to refer the Driver Manual to get this info

> In case of MySQL, Sub-protocol is "mysql" but,
  in-case of Oracle or DB2 its different
  










3. Sub-name
===========
> It's a Mandatory Information

> It Consists of,
1. Host Name (Computer Name/IP Address) 
2. Port Number (should be Digits)
3. Database Name / Schema Name 
4. User Name & Password (Optional)
	
> Arrangement of Sub-name varies from driver to driver, 
  we have to refer the manual & arrange accordingly
  
> Port Number:
  ============
  - It uniquely identifies an application in 
    an Operating System
  
  - In case of DB URL, it uniquely identifies
    a RDBMS Application
 
NOTE:- 
========
> Apart from "user name & password" rest all are 
  Case In-sensitive

JDBC URL - Few Examples:-
==========================

Oracle:
--------
jdbc:oracle:thin:myUser/myPassword@myHost:1521:myDB

MySQL:
--------
jdbc:mysql://myHost:3306/myDB?
				    user=myUser&password=myPassword
 
MS-SQL Server:
-----------------
jdbc:microsoft:sqlserver://myHost:1433;
                                 DatabaseName=myDB;
			                     user=myUser;
						         password=myPassword
  
  

  
  
  
Computer Name 	: QSP-SHMUTT-PC
IP Address 		: 192.168.0.150
Port No 		: 3306
DB Name			: BECM4_DB
UN				: root / j2ee
Password		: root / j2ee

jdbc:mysql://QSP-SHMUTT-PC:3306/BECM4_DB?user=j2ee&password=j2ee


	
	
	
jdbc:mysql://QSP-SHMUTT-PC:3306/BJM24_DB?user=j2ee&password=j2ee
jdbc:mysql://192.168.1.4:3306/BJM24_DB?user=j2ee&password=j2ee
jdbc:mysql://localhost:3306/BJM24_DB?user=j2ee&password=j2ee	
	
	
	
		



java.sql.DriverManager 
==========================
> DriverManager is a "Concrete Class" present in JDBC 
  API & as the name implies, it manages the drivers
  
> It helps Java Program to establish the connection 
  to DB & for that it requires following information
  1. Driver Class 
  2. DB URL 

> By invoking "registerDriver()" method on DriverManager
  we can provide an "Object of Driver Class"
  
> By invoking "getConnection()" method on DriverManager
  we can provide "DB URL" 

> DriverManager’s getConnection() method helps us to 
  establish the connection to the DB.  This method
  - throws "SQLException" if it is unable to 
    establish the connection to DB
	OR
  - returns an object of "Connection" if it is able 
    to establish the connection to DB
  
> "java.sql.Connection" is an interface & It's an
  "Object representation of Physical DB Connection" 
  that is used by Java program to communicate with DB
  
  
  
  
  
  
  
  
> "DriverManager" is not an implementation class of 
  "Connection" interface, instead it acts like "Helper 
  Class" to get an Object of implementation class of
  Connection interface
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
> DriverManager consist of only one constructor 
  which is "Private Default" in nature 
  
> Hence it cannot be inherited or instantiated. 
  So whatever the methods it exposes to outside
  world, they "should be public static" in 
  nature  
  
  
  
  
  
  
  
  
> DriverManager has 3 overloaded versions of getConnection()
  methods. They are,

--------------------------------------------------------
1. public static Connection getConnection(String dbUrl) 
   throws SQLException
--------------------------------------------------------
 String dbUrl = 
 "jdbc:mysql://localhost:3306/J2EE10AM_DB
 			         ?user=root&password=root";
 			
 Connection con = DriverManager.getConnection(dbUrl);

--------------------------------------------------------
2. public static Connection getConnection(String dbUrl, 
										  String userNM, 
										 String password) 
  throws SQLException
--------------------------------------------------------
String dbUrl = "jdbc:mysql://localhost:3306/J2EE10AM_DB";
String userNM = "root";
String pass   = "root";
				
Connection con 
     = DriverManager.getConnection(dbUrl, userNM, pass);

	 
	 
	 
	 
	 
	 
	 
-----------------------------------------------------------
3. public static Connection getConnection (String url, 
										Properties info) 
   throws SQLException
-----------------------------------------------------------
	 
String dbUrl="jdbc:mysql://localhost:3306/J2EE10AM_DB";
		
String filePath = "C:\\db.properties";
FileReader reader = new FileReader(filePath);
		
Properties props = new Properties();
props.load(reader);
		
Connection con = DriverManager.getConnection(dbUrl, props);

============================================================
Data Present in "db.properties" File is:- 
=============================================	
#DB Credentials
user = root
password = root	 
	 
NOTE:-
------
> We can make use of any version of "getConnection()"
  method to establish connection to RDBMS application	 

> But "getConnection (String url, Properties info)"
  helps us to take out the hard-coded credentials from
  program & keep it outside of the application
  
> Hence this method is widely used because it helps 
  us to "easily maintain the application" whenever 
  there is change in DB credentials
  	 

 
 
 
 
Results of RDBMS Application
===================================
> Whenever we issue "Select SQL Queries" to DB 
  it returns DB Results
  
> Whenever we issue "Other than Select SQL Queries"  
  to DB then it returns "No. of Rows Affected Count" 
  in the form of Integer 

> Hence w.r.t results we can group SQL Queries into  
  Two Groups 
  1. Select SQL Query 
  2. Other Than Select SQL Query

  
  
  
  
  
  
  
  
  
> Image:-   
	 



Static SQL Queries
===================
> ANY SQL queries 
  - "without conditions" OR 
  - "ALL Conditions with hard-coded values" 
  are called as "Static SQL Queries"
 
> Example :
---------------
 1. select * from ABC;
 2. create database DB_NAME;
 3. select * from ABC where X = 1;
 4. insert into ABC values (1, 'Praveen');
  
Note : ABC = Table Name

Dynamic SQL Queries
======================
> ANY SQL Queries which 
  - MUST have conditions AND 
  - One/More conditions value get decided at runtime 
  are known as "Dynamic SQL Queries" 

Examples:
--------
1. select * from ABC where X=? and Y=?;
2. select * from ABC where X=1 and Y=?;
3. insert into ABC values (?, 'Praveen');
 
 
 
 
 
 
NOTE : 
------
> ABC = Table Name
> Dynamic SQL Query MUST Contain One/More "?"
> There can be 4 possible combination of Queries we can 
   issue in JDBC 3rd step
   1. Static Select
   2. Static Other than Select
   3. Dynamic Select
   4. Dynamic Other than Select 
    
	

select * from ABC;
select * from ABC where X = 1;
create database DB_NAME;
insert into ABC values (1, 'Praveen');
update ABC set C=10;
delete from ABC;

select * from ABC where X=? and Y=?;
select * from ABC where X=1 and Y=?;
insert into ABC values (?, 'Praveen');
update ABC set C=10 and D=?;
delete from ABC where C=?;





  
  
  
JDBC Statements
====================
> JDBC Statements send SQL queries to RDBMS and 
  retrieve the data from RDBMS Application
  
> There are different types of JDBC Statements
  1. java.sql.Statement
  2. java.sql.PreparedStatement

> Once we create JDBC Statement object (any of the 
  above type), then we MUST invoke any one of the 
  below method to issue SQL queries to DB

1. public int executeUpdate() throws SQLException
---------------------------------------------------
> This method is used to execute "Other than SELECT" 
  SQL Queries
 
> This method returns "No. of Rows Affected Count" 
  in the form of Integer

2. public ResultSet executeQuery() throws SQLException
------------------------------------------------------
> This method is used to execute "ONLY SELECT" SQL 
  Queries   
   
> This method returns "DB Results" in the form of 
  "ResultSet" Object  
   
NOTE:-
========
1. If Query is "Static Select" then 
   - create "Statement" Object &
   - invoke "executeQuery()" method on that Object
 
2. If Query is "Static Other than Select" then 
   - create "Statement" Object &
   - invoke "executeUpdate()" method on that Object 
 
3. If Query is "Dynamic Select" then 
   - create "PreparedStatement" Object &
   - invoke "executeQuery()" method on that Object
 
4. If Query is "Dynamic Other than Select" then 
   - create "PreparedStatement" Object &
   - invoke "executeUpdate()" method on that Object
   
   
   
   
   
java.sql.Statement
=====================
> Its an interface & an Object of Statement is used 
  to execute "Static SQL Queries"

> Statement Object can be created by invoking 
  "createStatement()" method on "Connection" Object

Syntax:
-------
public Statement createStatement() 
throws SQLException  

Example:
--------
Statement stmt = con.createStatement();

where "con" is the Object reference of 
"java.sql.Connection" Object
  

  
  
  
******************
* GPS Exercise 1
******************    
1. Write "StatementExample" Program
2. Write a Java program to delete Reg. No. 6 data 
   from students_info table

delete from students_info where regno=6
Statement
executeUpdate()




  
  
java.sql.PreparedStatement
==================================
> Its an interface & an Object of PreparedStatement 
  is used to execute "Dynamic SQL Queries"

> PreparedStatement Object can be created by invoking 
  "prepareStatement()" method on "Connection" Object

Syntax:
-------
public PreparedStatement prepareStatement(String query) 
throws SQLException

Example:
--------
String query = " select * from students_info " 
			   +" where regno=? ";
			
PreparedStatement pstmt = con.prepareStatement(query);

where "con" is the Object reference of 
"java.sql.Connection" Object

> PreparedStatements MUST be used with ? & these ? 
  needs to be set using proper setXXX() method before
  executing dynamic SQL query

Syntax: 
-------
public void setXXX( Postiton of ? as int Value, 
					Runtime Value ) 
throws SQLException
		
- where XXX = Java Data Type corresponding to 
              DB Column Data Type
			  
- Also, "Runtime Value" Data Type SHOULD be same as 
  "XXX Data Type"		
  
> PreparedStatements are also known as “Precompiled 
  Statements” & they helps us to achieve "high 
  performance"

  
  
  
  
  
  
**********************  
*    Assignment      *
**********************  
> Write a Java Program which updates Reg. No. 1 
  data with following information
  First Name: XXX 
  Middle Name: YYY
  Last Name: ZZZ  

  
  
  
  
  
Tips:-
=======  
- Query to be Used:

	update students_info
	set firstname='XXX', 
		middlename='YYY', 
		lastname='ZZZ'
	where regno=1
	
- Since the Query is Static, create "Statement" Object
- Once, Statement Object is created invoke "executeUpdate()"
  method (because Query is "Other than Select")
- Print the count value in Console (as part of JDBC 4th Step) 
 
 
**************			
* Assignment *
**************
> Write a Java Program which deletes Reg. No. 5 
  data from "students_info" table 
 
 
 
 
 
 
 
 
 
Tips:-
=======  
- Query to be Used:

	delete from students_info
	where regno=5
	
- Since the Query is Static, create "Statement" Object
- Once, Statement Object is created invoke "executeUpdate()"
  method (because Query is "Other than Select")
- Print the count value in Console (as part of JDBC 4th Step)

***************			
* Assignment  *
***************
> Write a Java Program which takes following input 
  arguments via Command Line in the "same order" & 
  insert the data into corresponding tables
	1. Reg No. 
	2. First Name
	3. Middle Name
	4. Last Name
	5. Guardian First Name 
	6. Guardian Middle Name 
	7. Guardian Last Name 
	8. isadmin & 
	9. Password
	
 
 
Tips:-
========
- Queries to be used:
  
  insert into students_info values(?, ?, ?, ?)
  insert into guardian_info values(?, ?, ?, ?)
  insert into students_otherinfo values(?, ?, ?)

- In the 3rd Step create 3 PreparedStatement as shown below
PreparedStatement pstmt1 = con.prepareStatement(query1);
PreparedStatement pstmt2 = con.prepareStatement(query2);
PreparedStatement pstmt3 = con.prepareStatement(query3);

- In the 5th Step we need to Close 4 Objects 
  1 Connection Object & 
  3 PreparedStatement Objects

  
***************			
* Assignment  *
***************
> create a CSV (Comma Separated Values) file, which
  should have data as shown below

Register_Number, First_NM, Middle_NM, Last_NM,
Guardian_First_NM,Guardian_Middle_NM,Guardian_Last_NM,
Is_Admin, Password

Ex:- 
-----
1,AAA,BBB,CCC,XXX,YYY,ZZZ,Y,qwerty
2,ABC,DEF,GHI,JKL,MNO,PQR,N,qwerty
  
> Write a Java Program which reads the data from this
  CSV file (line-by-line) & insert it into 
  corresponding tables

  
  
  
  
  
Tips:-
=======    
- Create a CSV File with 5 rows of data  
- Write a Java Program to read the data from this 
  file & print it in console 
- Modify the above program to print each & every values
  using String Class "split()" method
  
  Ex:-
  String val = "abc,def,xyz";
  String[] values = val.split(",");
  
- Modify the above program, rather than printing the
  data, insert the data into tables (refer the previous
  assignment)
  
  
  
  
  
  
  
  
  
  
  
***************			
* Assignment  *
***************
> Write a Java Program to insert regno 1 to 5 data 
  into "students_otherinfo" table
  
  

Processing the Results returned by SQL Queries :-
================================================
> Whenever we issue SQL Queries to RDBMS Application 
  via JDBC there are two kinds of results expected 
  out of RDBMS Application
	1. No. of Rows Affected Count 
	2. DB Results 

> Since Java Program is directly interacting JDBC,
  JDBC returns 
  - "No. of Rows Affected Count" as "Integer Value" 
  - "DB Results" in the form of "ResultSet Object" 
  
  
  
  
java.sql.ResultSet
===================
> Its an interface & an Object of ResultSet is an 
  "Object representation of DB Results" produced by 
  Select SQL Query

> ResultSet object is produced by invoking
  "executeQuery()" Method on Statement OR 
  PreparedStatement Objects
  
  Example:-
  ----------
  - ResultSet rs = stmt.executeQuery("SQL_Query");
    where "stmt" is a Object reference of Statement
  
  - ResultSet rs = pstmt.executeQuery();
    where "pstmt" is a Object reference of 
    PreparedStatement
  
> ResultSet consists of N number of Rows with each 
  row containing N number of Columns

> Number of rows and columns in Resultset directly 
  depends on "where condition" & "column list" 
  respectively in "Select SQL Query"

> ResultSet object may consist of "Zero/More" OR 
  "Zero/One" rows 

> ResultSet consists of "Zero/One" row if where 
  condition is on Primary Key with "equal to (=)"
  
> for rest of the cases it consists of "Zero/More" 
  rows   
  
  
  
  
  
  
  
> If ResultSet consist of zero/more rows of data then
  we must use "while loop"

> If ResultSet consist of zero/one row of data then 
  we can use either "while loop" or "if block"
  (preferred)

> Once the ResultSet is produced, data from ResultSet
  can be extracted as follows

1. Move to desired Row by calling necessary ResultSet
   methods. For Ex : next(), first(), last(), etc.,

   Syntax of next()
   ====================
   public boolean next() throws SQLException	

2. Retrieve the desired column value using any one of
   the below getXXX() methods

	i.  public XXX getXXX(String columnName) 
	    throws SQLException	

	ii. public XXX getXXX(int columnIndex) 
	    throws SQLException	
 
   where XXX = Java Data Type corresponding to DB 
               Table column data type
	  
NOTE : getXXX() methods are the ONLY way to retrieve 
       data from ResultSet object		  
		  
	
 
   
   
   
   
   
   
   
   
   
   
Why we need to Close Necessary JDBC Objects:-
==============================================
> JDBC Objects such as 
  - Connection
  - Statement, PreparedStatement and 
  - ResultSet 
  make use of memory 
 
> In case of Connection Object, further RDBMS 
  Application resources are consumed

> Also memory consumed by ResultSet object is 
  comparatively more compared to other JDBC Objects
  
> Hence forgetting to close any of the JDBC objects 
  "will heavily impact Java as well as RDBMS 
  application performance" 
  & Garbage Collection should not be relied upon
  
> So it's important to close any of the JDBC Object
  as soon as their job is done

> To close any of the JDBC Objects invoke "close()" 
  method

Syntax:
----------		  
public void close() throws SQLException





  
  
  

JDBC Summary:
================  
> Commonly used JDBC Objects are  
                              ---|
1. java.sql.ResultSet            |
2. java.sql.Connection		     |
3. java.sql.Statement			 |--> Interfaces
4. java.sql.PreparedStatement    | 
5. java.sql.Driver               |
                              ---|
                          ---|
6. java.sql.DriverManager    |
7. java.sql.SQLException     |--> Concrete Class
                          ---| 

> SQLException is a Concrete Class which extends
  "java.lang.Exception" & its a "Checked Exception"


  
  
  
  

  
  
> JDBC Steps 1 to 4 will be in "try block" and 
  step 5 will be in "finally block"

> While making use of JDBC we MUST follow 5 steps
  and out of 5, ONLY Once 
  - We need to load the Driver (Step 1)
  - We have to get the DB Connection (Step 2)
  - We have to Close JDBC Objects (Step 5)
  
> But, Step 3 & 4 (i.e. Issuing SQL Queries & 
  Processing Results) can happen "N" number of times
  depending on our need (Min. "1" & Max."N number")

  
  
  
> JDBC is "DB Independent"(i.e it can work with ANY
  RDBMS Application) because "Driver JAR" is 
  DB Dependent 
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
> Though JDBC claims that it is "DB Independent" but,
  because of "SQL Queries (step 3)", it is "partially
  In-Dependent"
  
Note:
======
SQL is "DB Dependent". For example, below are the 
different SQL queries used to fetch first 5 records 
of the table depending on RDBMS application
		  
MySQL & PostgreSQL:	
---------------------
SELECT * FROM ABC LIMIT 5;

Oracle:	
--------
SELECT * FROM ABC WHERE rownum <=5;

MSSQL Server:	
---------------
SELECT TOP 5 * FROM ABC;

		  
--******************* END of JDBC ************************		  




**************
* Assignment *
**************
> Write a Java Program which accepts following input 
  arguments @ Runtime in the same order 
  1. Reg No. 
  2. Current Password
  3. New Password
  
> This Program first check whether Reg No. & 
  Current Password is matching
  
> If NO, then print the "Error Message" in Console
  
> If YES, then print the "Success Message" in Console 
  along with updating the password for that Reg No.















Google Search :- t2bot.ru/en/nod32key	  
		  
https://t2bot.ru/en/esetkeys/		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
		  
Transactions:-  
===============	
> A transaction is a "Group of SQL Queries" that are 
  executed as a unit. So either all of the SQL 
  Queries get executed successfully or none of them 
  get executed

> Transactions helps us to achieve "Data Consistency"

> Following steps are followed to make use of 
  Transactions in JDBC

1. Begin the transaction by disabling AutoCommit Mode
   [ con.setAutoCommit(false) ]

2. Issue One/More SQL Queries
   [ Generally "more than one" Insert/Update/Delete 
     SQL Queries ]

3. If No Exception, then "Commit" the transaction
   [ con.commit() ]

4. If Exception occurs, then "Rollback" the transaction 
   [ con.rollback() ]

Methods Syntax :-
=================
1. void Connection.setAutoCommit(boolean disable) 
   throws SQLException   

2. void Connection.commit() 
   throws SQLException

3. void Connection.rollback() 
   throws SQLException

   
   
   
   
Note: 
======
1. Transactions can also be used with one or more 
   Select SQL Queries but it’s of no use

2. Transactions can also be used with ONLY ONE 
   Insert/Update/Delete SQL Query but it’s of no use 

3. Whenever there is a scenario to execute 
  "More than One Insert/Update/Delete" SQL Queries 
  then "we must make use of Transactions"

4. Transactions Steps 1 to 3 we write inside "try 
   block" & Transaction Step 4 (Rollback the Txn) we
   write inside "catch block"








5.	If there is more than one "catch block", then we 
    have to write the Rollback statement in all the 
	catch blocks











6. We can also have rollback in the "finally 
   block" but this impacts the performance. 

   Since Rollback/Commit is an expensive operation,
   we should make use of Rollback/Commit whenever 
   there is a need. i.e. "At any instant of time we
   should issue either Commit/Rollback but not both"


   
   
   
   
TransactionExample :-
====================
public class TransactionExample {
public static void main(String[] args) {
	Connection con = null;
	PreparedStatement pstmt1 = null;
	PreparedStatement pstmt2 = null;
	PreparedStatement pstmt3 = null;
	
try {
	//1. Load the Driver
	//2. Get the DB Connection via Driver
	/*
	 * I. Begin the Txn
	 */
	con.setAutoCommit(false);
	/*
	 * II. issue one/more SQL Queries
	 */
	//3. Issue SQL Queries via Connection
	String query1 = " insert into students_info " 
					+" values (?,?,?,?) ";
	
	pstmt1 = con.prepareStatement(query1);
	pstmt1.setInt(1, Integer.parseInt(args[0]) );
	pstmt1.setString(2, args[1]);
	pstmt1.setString(3, args[2]);
	pstmt1.setString(4, args[3]);
	int count1 = pstmt1.executeUpdate();
	System.out.println("SI Rows Affected:"+count1);
	
	String query2 = " insert into guardian_info " 
					+" values (?,?,?,?) ";
	pstmt2 = con.prepareStatement(query2);
	pstmt2.setInt(1, Integer.parseInt(args[0]) );
	pstmt2.setString(2, args[4]);
	pstmt2.setString(3, args[5]);
	pstmt2.setString(4, args[6]);
	int count2 = pstmt2.executeUpdate();
	System.out.println("GI Rows Affected:"+count2);
	
	String query3 = " insert into students_otherinfo " 
					+" values (?,?,?) ";
	pstmt3 = con.prepareStatement(query3);
	pstmt3.setInt(1, Integer.parseInt(args[0]) );
	pstmt3.setString(2, args[7]);
	pstmt3.setString(3, args[8]);
	//Runtime Exception Simulation
	//int i = 100/0;
	int count3 = pstmt3.executeUpdate();
	System.out.println("SOI Rows Affected:"+count3);
	/*
	 * III. No Exception; Commit the Txn
	 */
	con.commit();
	//4. Process the Results returned by SQL Queries
	System.out.println("Profile Created");
} catch (Exception e) {
	/*
	 * Exception!!! Rollback the Txn
	 */
	try {
		con.rollback();
	} catch (SQLException e1) {
		e1.printStackTrace();
	}
	System.err.println("Profile NOT Created");
	e.printStackTrace();
} finally{
	//5. Close ALL JDBC Objects
	//Close all 3 PreparedStatement Objects
}//End of outer try catch block
}//End of Main
}//End of Class



		  
		  
		  
*************			
Assignment :
*************
Create a Table to store Students & their corresponding
Course information in "J2EE10AM_DB" with the following 
structure

Table Name 	: student_courseinfo
Columns		:
--------------
1. regno 		int
2. course_id 	int

Note:-
=======
- Since every regno could have joined to multiple courses
  hence combination of "regno & course_id" should be 
  made as primary key i.e. "Composite Key"		  