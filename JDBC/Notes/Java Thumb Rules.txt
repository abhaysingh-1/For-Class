> If L.H.S "Equeal to" R.H.S, then L.H.S is always 
  "Concrete Class"
  
  A ref = new A();
  
  
> If L.H.S "Not Equeal to" R.H.S, then L.H.S can be 
  "an Interface / Concrete Class / an Abstract Class"

  B ref = new A();
  
  
  
  
  
  
  
> A Class which is declared with "abstract" keyword
  is called as an "Abstract Class"

> A Class which is declared without "abstract" 
  keyword is called as "Concrete Class"
  
> Hence all "final classes" are "Concrete Class"
  
  
  
  
  
  
> Simply having an Abstract Class is of "No Use" & 
  there MUST be a "Atleast One Sub-Class"
  
> Simply having an Interface in Java is of "No Use" & 
  there MUST be a "Atleast One Implentation Class"  
  
  
  
  
  
  
  
  
> In Java, "Super Class" can be either an "Abstract 
  Class" or "Concrete Class"





  
  
  
  
  

  
> Anything in Java which start with Uppercase Letter
  is either "Class Name OR Interface Name"  
  
> Anything in Java which start with Lowercase Letter 
  & without parantasis is a "Variable Name"

> Anything in Java with parantasis is a "Method Name"

> In Java, anything apart from Premitive Data Types 
  are called as "Object References"  
  
  For Ex:
  ---------
  int i;
  boolean isTrue;
  Abc ref;
   
  Where,  
  - "i" &  "isTrue" are Premitive Data Types
  - "ref" is a Object Reference Variable
	where "Abc" can be 
	an Interface OR
	an Abstract Class OR
	Concrete Class


> If a method input argument is other than primitive
  data type, then it can be "Interface / Concrete Class
  / Abstract Class"

  For Example:
  ------------
  public void myMethod(Abc ref)
  {
	/*
     *	Some Business Logic
	 */
  }

  Where 
  - "ref" is a Object Reference Variable
  - "Abc" can be 
			an Interface OR
			an Abstract Class OR
			Concrete Class


> If a method return type is other than primitive data 
  type, then it can be "Interface / Concrete Class
  / Abstract Class"

  For Example:
  ------------
  public Abc myMethod()
  {
	/*
     *	Some Business Logic
	 */
  }

  Where "Abc" can be 
	an Interface OR
	an Abstract Class OR
	Concrete Class

> There are two types of Interfaces
  1. Marker Interface
  2. Non-Marker Interface
  
> If a Class implements as interface & we are getting
  the compilation error means its a non-marker interface
  
> If a Class implements as interface & we are NOT 
  getting the compilation error means it may be a 
  marker / non-marker interface
   


  
  