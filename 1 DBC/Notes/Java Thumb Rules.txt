***************************
*    Java Thumb Rules     *
***************************
1. If L.H.S "Equeal to" R.H.S, then L.H.S is always 
   "Concrete Class"
  
   A ref = new A();
  
2. If L.H.S "Not Equeal to" R.H.S, then L.H.S can be 
   "an Interface / Concrete Class / an Abstract Class"

   B ref = new A();
  
  
  
  
  
  
  
3. A Class which is declared with "abstract" keyword
   is called as an "Abstract Class"

4. A Class which is declared without "abstract" 
   keyword is called as "Concrete Class"
  
5. Hence all "final classes" are "Concrete Class"
  
  
  
  
  

  
6. Simply having an Interface in Java is of "No Use" 
   & there MUST be a "Atleast One Implentation Class"  
  
7. Simply having an Abstract Class is of "No Use" & 
   there MUST be a "Atleast One Sub-Class"  
  

  
  
  
  
  
  
8. In Java, "Super Class" can be either an "Abstract 
   Class" or "Concrete Class"





  
  
  
  
  

  
9. Anything in Java which start with Uppercase Letter
   & without parantasis is either "Class Name OR 
   Interface Name"  
  
10. Anything in Java which start with Lowercase 
    Letter & without parantasis is a "Variable Name"

11. Anything in Java which start with Lowercase 
    Letter & with parantasis is a "Method Name"

12. Anything in Java which start with Uppercase 
    Letter & with parantasis is a "Constructor"
	
13. In Java, anything apart from Premitive Data 
    Types are called as "Object References"  
  
  For Ex:
  ---------
  int i;
  boolean isTrue;
  Abc ref;
   
  Where,  
  - "i" &  "isTrue" are Premitive Data Types
  - "ref" is a Object Reference Variable
	where "Abc" can be 
	an Interface OR
	an Abstract Class OR
	Concrete Class


	
	
	

	
14. If a method/contructor input argument is other 
    than primitive data type, then it can be 
	"Interface / Concrete Class / Abstract Class"

  For Example:
  ------------
  public void myMethod(Abc ref)
  {
	//Some Business Logic
  }

  Where 
  - "ref" is a Object Reference Variable
  - "Abc" can be 
			an Interface OR
			an Abstract Class OR
			Concrete Class


			
			
15. If a method return type is other than primitive 
    data type, then it can be "Interface / Concrete 
	Class / Abstract Class"

  For Example:
  ------------
  public Abc myMethod()
  {
	//Some Business Logic
  }

  Where "Abc" can be 
	an Interface OR
	an Abstract Class OR
	Concrete Class

	
	
	
	
	
16. There are two types of Interfaces
    1. Marker Interface
    2. Non-Marker Interface
  
17. If a Class implements an interface & we are 
    getting the compilation error means it must be a Non-Marker Interface & this interface SHOULD have One/More Abstract Methods
  
18. If a Class implements an interface & we are NOT 
    getting any compilation error means it can be a 
    Non-Marker / Marker Interface.
  
19. If it is a Non-Marker interface then it SHOULD 
    NOT consist of ANY Abstract Methods but it will consist of only Variables
  
   


  
  